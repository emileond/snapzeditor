{
  "version": 3,
  "sources": ["../bundle-AODDXG/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/replicate/lib/error.js", "../../../node_modules/replicate/lib/identifier.js", "../../../node_modules/replicate/lib/util.js", "../../../node_modules/replicate/vendor/eventsource-parser/stream.js", "../../../node_modules/replicate/vendor/streams-text-encoding/text-decoder-stream.js", "../../../node_modules/replicate/lib/stream.js", "../../../node_modules/replicate/lib/accounts.js", "../../../node_modules/replicate/lib/collections.js", "../../../node_modules/replicate/lib/deployments.js", "../../../node_modules/replicate/lib/hardware.js", "../../../node_modules/replicate/lib/models.js", "../../../node_modules/replicate/lib/predictions.js", "../../../node_modules/replicate/lib/trainings.js", "../../../node_modules/replicate/lib/webhooks.js", "../../../node_modules/replicate/package.json", "../../../node_modules/replicate/index.js", "../../../functions/api/cancel-prediction.js", "../../../functions/api/create-prediction.js", "../../../functions/api/get-prediction.js", "functionsRoutes-0.37632616852471723.mjs", "../bundle-AODDXG/middleware-loader.entry.ts", "../bundle-AODDXG/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/emilio/Documents/snapzeditor/.wrangler/tmp/pages-ALQ76m/functionsWorker-0.4032073521756121.mjs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t  );\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "/**\n * A representation of an API error.\n */\nclass ApiError extends Error {\n  /**\n   * Creates a representation of an API error.\n   *\n   * @param {string} message - Error message\n   * @param {Request} request - HTTP request\n   * @param {Response} response - HTTP response\n   * @returns {ApiError} - An instance of ApiError\n   */\n  constructor(message, request, response) {\n    super(message);\n    this.name = \"ApiError\";\n    this.request = request;\n    this.response = response;\n  }\n}\n\nmodule.exports = ApiError;\n", "/*\n * A reference to a model version in the format `owner/name` or `owner/name:version`.\n */\nclass ModelVersionIdentifier {\n  /*\n   * @param {string} Required. The model owner.\n   * @param {string} Required. The model name.\n   * @param {string} The model version.\n   */\n  constructor(owner, name, version = null) {\n    this.owner = owner;\n    this.name = name;\n    this.version = version;\n  }\n\n  /*\n   * Parse a reference to a model version\n   *\n   * @param {string}\n   * @returns {ModelVersionIdentifier}\n   * @throws {Error} If the reference is invalid.\n   */\n  static parse(ref) {\n    const match = ref.match(\n      /^(?<owner>[^/]+)\\/(?<name>[^/:]+)(:(?<version>.+))?$/\n    );\n    if (!match) {\n      throw new Error(\n        `Invalid reference to model version: ${ref}. Expected format: owner/name or owner/name:version`\n      );\n    }\n\n    const { owner, name, version } = match.groups;\n\n    return new ModelVersionIdentifier(owner, name, version);\n  }\n}\n\nmodule.exports = ModelVersionIdentifier;\n", "const ApiError = require(\"./error\");\n\n/**\n * @see {@link validateWebhook}\n * @overload\n * @param {object} requestData - The request data\n * @param {string} requestData.id - The webhook ID header from the incoming request.\n * @param {string} requestData.timestamp - The webhook timestamp header from the incoming request.\n * @param {string} requestData.body - The raw body of the incoming webhook request.\n * @param {string} requestData.secret - The webhook secret, obtained from `replicate.webhooks.defaul.secret` method.\n * @param {string} requestData.signature - The webhook signature header from the incoming request, comprising one or more space-delimited signatures.\n */\n\n/**\n * @see {@link validateWebhook}\n * @overload\n * @param {object} requestData - The request object\n * @param {object} requestData.headers - The request headers\n * @param {string} requestData.headers[\"webhook-id\"] - The webhook ID header from the incoming request\n * @param {string} requestData.headers[\"webhook-timestamp\"] - The webhook timestamp header from the incoming request\n * @param {string} requestData.headers[\"webhook-signature\"] - The webhook signature header from the incoming request, comprising one or more space-delimited signatures\n * @param {string} requestData.body - The raw body of the incoming webhook request\n * @param {string} secret - The webhook secret, obtained from `replicate.webhooks.defaul.secret` method\n */\n\n/**\n * Validate a webhook signature\n *\n * @returns {Promise<boolean>} - True if the signature is valid\n * @throws {Error} - If the request is missing required headers, body, or secret\n */\nasync function validateWebhook(requestData, secret) {\n  let { id, timestamp, body, signature } = requestData;\n  const signingSecret = secret || requestData.secret;\n\n  if (requestData && requestData.headers && requestData.body) {\n    id = requestData.headers.get(\"webhook-id\");\n    timestamp = requestData.headers.get(\"webhook-timestamp\");\n    signature = requestData.headers.get(\"webhook-signature\");\n    body = requestData.body;\n  }\n\n  if (body instanceof ReadableStream || body.readable) {\n    try {\n      body = await new Response(body).text();\n    } catch (err) {\n      throw new Error(`Error reading body: ${err.message}`);\n    }\n  } else if (isTypedArray(body)) {\n    body = await new Blob([body]).text();\n  } else if (typeof body !== \"string\") {\n    throw new Error(\"Invalid body type\");\n  }\n\n  if (!id || !timestamp || !signature) {\n    throw new Error(\"Missing required webhook headers\");\n  }\n\n  if (!body) {\n    throw new Error(\"Missing required body\");\n  }\n\n  if (!signingSecret) {\n    throw new Error(\"Missing required secret\");\n  }\n\n  const signedContent = `${id}.${timestamp}.${body}`;\n\n  const computedSignature = await createHMACSHA256(\n    signingSecret.split(\"_\").pop(),\n    signedContent\n  );\n\n  const expectedSignatures = signature\n    .split(\" \")\n    .map((sig) => sig.split(\",\")[1]);\n\n  return expectedSignatures.some(\n    (expectedSignature) => expectedSignature === computedSignature\n  );\n}\n\n/**\n * @param {string} secret - base64 encoded string\n * @param {string} data - text body of request\n */\nasync function createHMACSHA256(secret, data) {\n  const encoder = new TextEncoder();\n  let crypto = globalThis.crypto;\n\n  // In Node 18 the `crypto` global is behind a --no-experimental-global-webcrypto flag\n  if (typeof crypto === \"undefined\" && typeof require === \"function\") {\n    crypto = require(\"node:crypto\").webcrypto;\n  }\n\n  const key = await crypto.subtle.importKey(\n    \"raw\",\n    base64ToBytes(secret),\n    { name: \"HMAC\", hash: \"SHA-256\" },\n    false,\n    [\"sign\"]\n  );\n\n  const signature = await crypto.subtle.sign(\"HMAC\", key, encoder.encode(data));\n  return bytesToBase64(signature);\n}\n\n/**\n * Convert a base64 encoded string into bytes.\n *\n * @param {string} the base64 encoded string\n * @return {Uint8Array}\n *\n * Two functions for encoding/decoding base64 strings using web standards. Not\n * intended to be used to encode/decode arbitrary string data.\n * See: https://developer.mozilla.org/en-US/docs/Glossary/Base64#javascript_support\n * See: https://stackoverflow.com/a/31621532\n *\n * Performance might take a hit because of the conversion to string and then to binary,\n * if this is the case we might want to look at an alternative solution.\n * See: https://jsben.ch/wnaZC\n */\nfunction base64ToBytes(base64) {\n  return Uint8Array.from(atob(base64), (m) => m.codePointAt(0));\n}\n\n/**\n * Convert a base64 encoded string into bytes.\n *\n * See {@link base64ToBytes} for caveats.\n *\n * @param {Uint8Array | ArrayBuffer} the base64 encoded string\n * @return {string}\n */\nfunction bytesToBase64(bytes) {\n  return btoa(String.fromCharCode.apply(null, new Uint8Array(bytes)));\n}\n\n/**\n * Automatically retry a request if it fails with an appropriate status code.\n *\n * A GET request is retried if it fails with a 429 or 5xx status code.\n * A non-GET request is retried only if it fails with a 429 status code.\n *\n * If the response sets a Retry-After header,\n * the request is retried after the number of seconds specified in the header.\n * Otherwise, the request is retried after the specified interval,\n * with exponential backoff and jitter.\n *\n * @param {Function} request - A function that returns a Promise that resolves with a Response object\n * @param {object} options\n * @param {Function} [options.shouldRetry] - A function that returns true if the request should be retried\n * @param {number} [options.maxRetries] - Maximum number of retries. Defaults to 5\n * @param {number} [options.interval] - Interval between retries in milliseconds. Defaults to 500\n * @returns {Promise<Response>} - Resolves with the response object\n * @throws {ApiError} If the request failed\n */\nasync function withAutomaticRetries(request, options = {}) {\n  const shouldRetry = options.shouldRetry || (() => false);\n  const maxRetries = options.maxRetries || 5;\n  const interval = options.interval || 500;\n  const jitter = options.jitter || 100;\n\n  // eslint-disable-next-line no-promise-executor-return\n  const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n  let attempts = 0;\n  do {\n    let delay = interval * 2 ** attempts + Math.random() * jitter;\n\n    /* eslint-disable no-await-in-loop */\n    try {\n      const response = await request();\n      if (response.ok || !shouldRetry(response)) {\n        return response;\n      }\n    } catch (error) {\n      if (error instanceof ApiError) {\n        const retryAfter = error.response.headers.get(\"Retry-After\");\n        if (retryAfter) {\n          if (!Number.isInteger(retryAfter)) {\n            // Retry-After is a date\n            const date = new Date(retryAfter);\n            if (!Number.isNaN(date.getTime())) {\n              delay = date.getTime() - new Date().getTime();\n            }\n          } else {\n            // Retry-After is a number of seconds\n            delay = retryAfter * 1000;\n          }\n        }\n      }\n    }\n\n    if (Number.isInteger(maxRetries) && maxRetries > 0) {\n      if (Number.isInteger(delay) && delay > 0) {\n        await sleep(interval * 2 ** (options.maxRetries - maxRetries));\n      }\n      attempts += 1;\n    }\n    /* eslint-enable no-await-in-loop */\n  } while (attempts < maxRetries);\n\n  return request();\n}\n\nconst MAX_DATA_URI_SIZE = 10_000_000;\n\n/**\n * Walks the inputs and transforms any binary data found into a\n * base64-encoded data URI.\n *\n * @param {object} inputs - The inputs to transform\n * @returns {object} - The transformed inputs\n * @throws {Error} If the size of inputs exceeds a given threshould set by MAX_DATA_URI_SIZE\n */\nasync function transformFileInputs(inputs) {\n  let totalBytes = 0;\n  const result = await transform(inputs, async (value) => {\n    let buffer;\n    let mime;\n\n    if (value instanceof Blob) {\n      // Currently we use a NodeJS only API for base64 encoding, as\n      // we move to support the browser we could support either using\n      // btoa (which does string encoding), the FileReader API or\n      // a JavaScript implenentation like base64-js.\n      // See: https://developer.mozilla.org/en-US/docs/Glossary/Base64\n      // See: https://github.com/beatgammit/base64-js\n      buffer = await value.arrayBuffer();\n      mime = value.type;\n    } else if (isTypedArray(value)) {\n      buffer = value;\n    } else {\n      return value;\n    }\n\n    totalBytes += buffer.byteLength;\n    if (totalBytes > MAX_DATA_URI_SIZE) {\n      throw new Error(\n        `Combined filesize of prediction ${totalBytes} bytes exceeds 10mb limit for inline encoding, please provide URLs instead`\n      );\n    }\n\n    const data = bytesToBase64(buffer);\n    mime = mime ?? \"application/octet-stream\";\n\n    return `data:${mime};base64,${data}`;\n  });\n\n  return result;\n}\n\n// Walk a JavaScript object and transform the leaf values.\nasync function transform(value, mapper) {\n  if (Array.isArray(value)) {\n    let copy = [];\n    for (const val of value) {\n      copy = await transform(val, mapper);\n    }\n    return copy;\n  }\n\n  if (isPlainObject(value)) {\n    const copy = {};\n    for (const key of Object.keys(value)) {\n      copy[key] = await transform(value[key], mapper);\n    }\n    return copy;\n  }\n\n  return await mapper(value);\n}\n\nfunction isTypedArray(arr) {\n  return (\n    arr instanceof Int8Array ||\n    arr instanceof Int16Array ||\n    arr instanceof Int32Array ||\n    arr instanceof Uint8Array ||\n    arr instanceof Uint8ClampedArray ||\n    arr instanceof Uint16Array ||\n    arr instanceof Uint32Array ||\n    arr instanceof Float32Array ||\n    arr instanceof Float64Array\n  );\n}\n\n// Test for a plain JS object.\n// Source: lodash.isPlainObject\nfunction isPlainObject(value) {\n  const isObjectLike = typeof value === \"object\" && value !== null;\n  if (!isObjectLike || String(value) !== \"[object Object]\") {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  if (proto === null) {\n    return true;\n  }\n  const Ctor =\n    Object.prototype.hasOwnProperty.call(proto, \"constructor\") &&\n    proto.constructor;\n  return (\n    typeof Ctor === \"function\" &&\n    Ctor instanceof Ctor &&\n    Function.prototype.toString.call(Ctor) ===\n      Function.prototype.toString.call(Object)\n  );\n}\n\n/**\n * Parse progress from prediction logs.\n *\n * This function supports log statements in the following format,\n * which are generated by https://github.com/tqdm/tqdm and similar libraries:\n *\n * ```\n * 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         | 7568/10000 [00:33<00:10, 229.00it/s]\n * ```\n *\n * @example\n * const progress = parseProgressFromLogs(\"76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         | 7568/10000 [00:33<00:10, 229.00it/s]\");\n * console.log(progress);\n * // {\n * //   percentage: 0.76,\n * //   current: 7568,\n * //   total: 10000,\n * // }\n *\n * @param {object|string} input - A prediction object or string.\n * @returns {(object|null)} - An object with the percentage, current, and total, or null if no progress can be parsed.\n */\nfunction parseProgressFromLogs(input) {\n  const logs = typeof input === \"object\" && input.logs ? input.logs : input;\n  if (!logs || typeof logs !== \"string\") {\n    return null;\n  }\n\n  const pattern = /^\\s*(\\d+)%\\s*\\|.+?\\|\\s*(\\d+)\\/(\\d+)/;\n  const lines = logs.split(\"\\n\").reverse();\n\n  for (const line of lines) {\n    const matches = line.match(pattern);\n\n    if (matches && matches.length === 4) {\n      return {\n        percentage: parseInt(matches[1], 10) / 100,\n        current: parseInt(matches[2], 10),\n        total: parseInt(matches[3], 10),\n      };\n    }\n  }\n\n  return null;\n}\n\n/**\n * Helper to make any `ReadableStream` iterable, this is supported\n * by most server runtimes but browsers still haven't implemented\n * it yet.\n * See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream#browser_compatibility\n *\n * @template T\n * @param {ReadableStream<T>} stream an instance of a `ReadableStream`\n * @yields {T} a chunk/event from the stream\n */\nasync function* streamAsyncIterator(stream) {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) return;\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nmodule.exports = {\n  transformFileInputs,\n  validateWebhook,\n  withAutomaticRetries,\n  parseProgressFromLogs,\n  streamAsyncIterator,\n};\n", "// Source: https://github.com/rexxars/eventsource-parser/tree/v1.1.2\n//\n// MIT License\n//\n// Copyright (c) 2024 Espen Hovlandsdal <espen@hovlandsdal.com>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if ((from && typeof from === \"object\") || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, {\n          get: () => from[key],\n          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,\n        });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) =>\n  __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// /input.ts\nvar input_exports = {};\n__export(input_exports, {\n  EventSourceParserStream: () => EventSourceParserStream,\n});\nmodule.exports = __toCommonJS(input_exports);\n\n// http-url:https://unpkg.com/eventsource-parser@1.1.2/dist/index.js\nfunction createParser(onParse) {\n  let isFirstChunk;\n  let buffer;\n  let startingPosition;\n  let startingFieldLength;\n  let eventId;\n  let eventName;\n  let data;\n  reset();\n  return {\n    feed,\n    reset,\n  };\n  function reset() {\n    isFirstChunk = true;\n    buffer = \"\";\n    startingPosition = 0;\n    startingFieldLength = -1;\n    eventId = void 0;\n    eventName = void 0;\n    data = \"\";\n  }\n  function feed(chunk) {\n    buffer = buffer ? buffer + chunk : chunk;\n    if (isFirstChunk && hasBom(buffer)) {\n      buffer = buffer.slice(BOM.length);\n    }\n    isFirstChunk = false;\n    const length = buffer.length;\n    let position = 0;\n    let discardTrailingNewline = false;\n    while (position < length) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === \"\\n\") {\n          ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineLength = -1;\n      let fieldLength = startingFieldLength;\n      let character;\n      for (\n        let index = startingPosition;\n        lineLength < 0 && index < length;\n        ++index\n      ) {\n        character = buffer[index];\n        if (character === \":\" && fieldLength < 0) {\n          fieldLength = index - position;\n        } else if (character === \"\\r\") {\n          discardTrailingNewline = true;\n          lineLength = index - position;\n        } else if (character === \"\\n\") {\n          lineLength = index - position;\n        }\n      }\n      if (lineLength < 0) {\n        startingPosition = length - position;\n        startingFieldLength = fieldLength;\n        break;\n      } else {\n        startingPosition = 0;\n        startingFieldLength = -1;\n      }\n      parseEventStreamLine(buffer, position, fieldLength, lineLength);\n      position += lineLength + 1;\n    }\n    if (position === length) {\n      buffer = \"\";\n    } else if (position > 0) {\n      buffer = buffer.slice(position);\n    }\n  }\n  function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {\n    if (lineLength === 0) {\n      if (data.length > 0) {\n        onParse({\n          type: \"event\",\n          id: eventId,\n          event: eventName || void 0,\n          data: data.slice(0, -1),\n          // remove trailing newline\n        });\n        data = \"\";\n        eventId = void 0;\n      }\n      eventName = void 0;\n      return;\n    }\n    const noValue = fieldLength < 0;\n    const field = lineBuffer.slice(\n      index,\n      index + (noValue ? lineLength : fieldLength)\n    );\n    let step = 0;\n    if (noValue) {\n      step = lineLength;\n    } else if (lineBuffer[index + fieldLength + 1] === \" \") {\n      step = fieldLength + 2;\n    } else {\n      step = fieldLength + 1;\n    }\n    const position = index + step;\n    const valueLength = lineLength - step;\n    const value = lineBuffer.slice(position, position + valueLength).toString();\n    if (field === \"data\") {\n      data += value ? \"\".concat(value, \"\\n\") : \"\\n\";\n    } else if (field === \"event\") {\n      eventName = value;\n    } else if (field === \"id\" && !value.includes(\"\\0\")) {\n      eventId = value;\n    } else if (field === \"retry\") {\n      const retry = parseInt(value, 10);\n      if (!Number.isNaN(retry)) {\n        onParse({\n          type: \"reconnect-interval\",\n          value: retry,\n        });\n      }\n    }\n  }\n}\nvar BOM = [239, 187, 191];\nfunction hasBom(buffer) {\n  return BOM.every((charCode, index) => buffer.charCodeAt(index) === charCode);\n}\n\n// http-url:https://unpkg.com/eventsource-parser@1.1.2/dist/stream.js\nvar EventSourceParserStream = class extends TransformStream {\n  constructor() {\n    let parser;\n    super({\n      start(controller) {\n        parser = createParser((event) => {\n          if (event.type === \"event\") {\n            controller.enqueue(event);\n          }\n        });\n      },\n      transform(chunk) {\n        parser.feed(chunk);\n      },\n    });\n  }\n};\n", "// Adapted from https://github.com/stardazed/sd-streams\n//\n// MIT License\n//\n// Copyright (c) 2018-Present @zenmumbler\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// /input.ts\nvar input_exports = {};\n__export(input_exports, {\n  TextDecoderStream: () => TextDecoderStream\n});\nmodule.exports = __toCommonJS(input_exports);\n\n// http-url:https://unpkg.com/@stardazed/streams-text-encoding@1.0.2/dist/sd-streams-text-encoding.esm.js\nvar decDecoder = Symbol(\"decDecoder\");\nvar decTransform = Symbol(\"decTransform\");\nvar TextDecodeTransformer = class {\n  constructor(decoder) {\n    this.decoder_ = decoder;\n  }\n  transform(chunk, controller) {\n    if (!(chunk instanceof ArrayBuffer || ArrayBuffer.isView(chunk))) {\n      throw new TypeError(\"Input data must be a BufferSource\");\n    }\n    const text = this.decoder_.decode(chunk, { stream: true });\n    if (text.length !== 0) {\n      controller.enqueue(text);\n    }\n  }\n  flush(controller) {\n    const text = this.decoder_.decode();\n    if (text.length !== 0) {\n      controller.enqueue(text);\n    }\n  }\n};\nvar TextDecoderStream = class {\n  constructor(label, options) {\n    const decoder = new TextDecoder(label || \"utf-8\", options || {});\n    this[decDecoder] = decoder;\n    this[decTransform] = new TransformStream(new TextDecodeTransformer(decoder));\n  }\n  get encoding() {\n    return this[decDecoder].encoding;\n  }\n  get fatal() {\n    return this[decDecoder].fatal;\n  }\n  get ignoreBOM() {\n    return this[decDecoder].ignoreBOM;\n  }\n  get readable() {\n    return this[decTransform].readable;\n  }\n  get writable() {\n    return this[decTransform].writable;\n  }\n};\nvar encEncoder = Symbol(\"encEncoder\");\nvar encTransform = Symbol(\"encTransform\");\n", "// Attempt to use readable-stream if available, attempt to use the built-in stream module.\n\nconst ApiError = require(\"./error\");\nconst { streamAsyncIterator } = require(\"./util\");\nconst {\n  EventSourceParserStream,\n} = require(\"../vendor/eventsource-parser/stream\");\nconst { TextDecoderStream } =\n  typeof globalThis.TextDecoderStream === \"undefined\"\n    ? require(\"../vendor/streams-text-encoding/text-decoder-stream\")\n    : globalThis;\n\n/**\n * A server-sent event.\n */\nclass ServerSentEvent {\n  /**\n   * Create a new server-sent event.\n   *\n   * @param {string} event The event name.\n   * @param {string} data The event data.\n   * @param {string} id The event ID.\n   * @param {number} retry The retry time.\n   */\n  constructor(event, data, id, retry) {\n    this.event = event;\n    this.data = data;\n    this.id = id;\n    this.retry = retry;\n  }\n\n  /**\n   * Convert the event to a string.\n   */\n  toString() {\n    if (this.event === \"output\") {\n      return this.data;\n    }\n\n    return \"\";\n  }\n}\n\n/**\n * Create a new stream of server-sent events.\n *\n * @param {object} config\n * @param {string} config.url The URL to connect to.\n * @param {typeof fetch} [config.fetch] The URL to connect to.\n * @param {object} [config.options] The EventSource options.\n * @returns {ReadableStream<ServerSentEvent> & AsyncIterable<ServerSentEvent>}\n */\nfunction createReadableStream({ url, fetch, options = {} }) {\n  return new ReadableStream({\n    async start(controller) {\n      const init = {\n        ...options,\n        headers: {\n          ...options.headers,\n          Accept: \"text/event-stream\",\n        },\n      };\n      const response = await fetch(url, init);\n\n      if (!response.ok) {\n        const text = await response.text();\n        const request = new Request(url, init);\n        controller.error(\n          new ApiError(\n            `Request to ${url} failed with status ${response.status}: ${text}`,\n            request,\n            response\n          )\n        );\n      }\n\n      const stream = response.body\n        .pipeThrough(new TextDecoderStream())\n        .pipeThrough(new EventSourceParserStream());\n\n      for await (const event of streamAsyncIterator(stream)) {\n        if (event.event === \"error\") {\n          controller.error(new Error(event.data));\n          break;\n        }\n\n        controller.enqueue(\n          new ServerSentEvent(event.event, event.data, event.id)\n        );\n\n        if (event.event === \"done\") {\n          break;\n        }\n      }\n\n      controller.close();\n    },\n  });\n}\n\nmodule.exports = {\n  createReadableStream,\n  ServerSentEvent,\n};\n", "/**\n * Get the current account\n *\n * @returns {Promise<object>} Resolves with the current account\n */\nasync function getCurrentAccount() {\n  const response = await this.request(\"/account\", {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\nmodule.exports = {\n  current: getCurrentAccount,\n};\n", "/**\n * Fetch a model collection\n *\n * @param {string} collection_slug - Required. The slug of the collection. See http://replicate.com/collections\n * @returns {Promise<object>} - Resolves with the collection data\n */\nasync function getCollection(collection_slug) {\n  const response = await this.request(`/collections/${collection_slug}`, {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\n/**\n * Fetch a list of model collections\n *\n * @returns {Promise<object>} - Resolves with the collections data\n */\nasync function listCollections() {\n  const response = await this.request(\"/collections\", {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\nmodule.exports = { get: getCollection, list: listCollections };\n", "const { transformFileInputs } = require(\"./util\");\n\n/**\n * Create a new prediction with a deployment\n *\n * @param {string} deployment_owner - Required. The username of the user or organization who owns the deployment\n * @param {string} deployment_name - Required. The name of the deployment\n * @param {object} options\n * @param {object} options.input - Required. An object with the model inputs\n * @param {boolean} [options.stream] - Whether to stream the prediction output. Defaults to false\n * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the prediction has new output\n * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n * @returns {Promise<object>} Resolves with the created prediction data\n */\nasync function createPrediction(deployment_owner, deployment_name, options) {\n  const { stream, input, ...data } = options;\n\n  if (data.webhook) {\n    try {\n      // eslint-disable-next-line no-new\n      new URL(data.webhook);\n    } catch (err) {\n      throw new Error(\"Invalid webhook URL\");\n    }\n  }\n\n  const response = await this.request(\n    `/deployments/${deployment_owner}/${deployment_name}/predictions`,\n    {\n      method: \"POST\",\n      data: {\n        ...data,\n        input: await transformFileInputs(input),\n        stream,\n      },\n    }\n  );\n\n  return response.json();\n}\n\n/**\n * Get a deployment\n *\n * @param {string} deployment_owner - Required. The username of the user or organization who owns the deployment\n * @param {string} deployment_name - Required. The name of the deployment\n * @returns {Promise<object>} Resolves with the deployment data\n */\nasync function getDeployment(deployment_owner, deployment_name) {\n  const response = await this.request(\n    `/deployments/${deployment_owner}/${deployment_name}`,\n    {\n      method: \"GET\",\n    }\n  );\n\n  return response.json();\n}\n\n/**\n * @typedef {Object} DeploymentCreateRequest - Request body for `deployments.create`\n * @property {string} name - the name of the deployment\n * @property {string} model - the full name of the model that you want to deploy e.g. stability-ai/sdxl\n * @property {string} version - the 64-character string ID of the model version that you want to deploy\n * @property {string} hardware - the SKU for the hardware used to run the model, via `replicate.hardware.list()`\n * @property {number} min_instances - the minimum number of instances for scaling\n * @property {number} max_instances - the maximum number of instances for scaling\n */\n\n/**\n * Create a deployment\n *\n * @param {DeploymentCreateRequest} config - Required. The deployment config.\n * @returns {Promise<object>} Resolves with the deployment data\n */\nasync function createDeployment(deployment_config) {\n  const response = await this.request(\"/deployments\", {\n    method: \"POST\",\n    data: deployment_config,\n  });\n\n  return response.json();\n}\n\n/**\n * @typedef {Object} DeploymentUpdateRequest - Request body for `deployments.update`\n * @property {string} version - the 64-character string ID of the model version that you want to deploy\n * @property {string} hardware - the SKU for the hardware used to run the model, via `replicate.hardware.list()`\n * @property {number} min_instances - the minimum number of instances for scaling\n * @property {number} max_instances - the maximum number of instances for scaling\n */\n\n/**\n * Update an existing deployment\n *\n * @param {string} deployment_owner - Required. The username of the user or organization who owns the deployment\n * @param {string} deployment_name - Required. The name of the deployment\n * @param {DeploymentUpdateRequest} deployment_config - Required. The deployment changes.\n * @returns {Promise<object>} Resolves with the deployment data\n */\nasync function updateDeployment(\n  deployment_owner,\n  deployment_name,\n  deployment_config\n) {\n  const response = await this.request(\n    `/deployments/${deployment_owner}/${deployment_name}`,\n    {\n      method: \"PATCH\",\n      data: deployment_config,\n    }\n  );\n\n  return response.json();\n}\n\n/**\n * List all deployments\n *\n * @returns {Promise<object>} - Resolves with a page of deployments\n */\nasync function listDeployments() {\n  const response = await this.request(\"/deployments\", {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\nmodule.exports = {\n  predictions: {\n    create: createPrediction,\n  },\n  get: getDeployment,\n  create: createDeployment,\n  update: updateDeployment,\n  list: listDeployments,\n};\n", "/**\n * List hardware\n *\n * @returns {Promise<object[]>} Resolves with the array of hardware\n */\nasync function listHardware() {\n  const response = await this.request(\"/hardware\", {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\nmodule.exports = {\n  list: listHardware,\n};\n", "/**\n * Get information about a model\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @returns {Promise<object>} Resolves with the model data\n */\nasync function getModel(model_owner, model_name) {\n  const response = await this.request(`/models/${model_owner}/${model_name}`, {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\n/**\n * List model versions\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @returns {Promise<object>} Resolves with the list of model versions\n */\nasync function listModelVersions(model_owner, model_name) {\n  const response = await this.request(\n    `/models/${model_owner}/${model_name}/versions`,\n    {\n      method: \"GET\",\n    }\n  );\n\n  return response.json();\n}\n\n/**\n * Get a specific model version\n *\n * @param {string} model_owner - Required. The name of the user or organization that owns the model\n * @param {string} model_name - Required. The name of the model\n * @param {string} version_id - Required. The model version\n * @returns {Promise<object>} Resolves with the model version data\n */\nasync function getModelVersion(model_owner, model_name, version_id) {\n  const response = await this.request(\n    `/models/${model_owner}/${model_name}/versions/${version_id}`,\n    {\n      method: \"GET\",\n    }\n  );\n\n  return response.json();\n}\n\n/**\n * List all public models\n *\n * @returns {Promise<object>} Resolves with the model version data\n */\nasync function listModels() {\n  const response = await this.request(\"/models\", {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\n/**\n * Create a new model\n *\n * @param {string} model_owner - Required. The name of the user or organization that will own the model. This must be the same as the user or organization that is making the API request. In other words, the API token used in the request must belong to this user or organization.\n * @param {string} model_name - Required. The name of the model. This must be unique among all models owned by the user or organization.\n * @param {object} options\n * @param {(\"public\"|\"private\")} options.visibility - Required. Whether the model should be public or private. A public model can be viewed and run by anyone, whereas a private model can be viewed and run only by the user or organization members that own the model.\n * @param {string} options.hardware - Required. The SKU for the hardware used to run the model. Possible values can be found by calling `Replicate.hardware.list()`.\n * @param {string} options.description - A description of the model.\n * @param {string} options.github_url - A URL for the model's source code on GitHub.\n * @param {string} options.paper_url - A URL for the model's paper.\n * @param {string} options.license_url - A URL for the model's license.\n * @param {string} options.cover_image_url - A URL for the model's cover image. This should be an image file.\n * @returns {Promise<object>} Resolves with the model version data\n */\nasync function createModel(model_owner, model_name, options) {\n  const data = { owner: model_owner, name: model_name, ...options };\n\n  const response = await this.request(\"/models\", {\n    method: \"POST\",\n    data,\n  });\n\n  return response.json();\n}\n\nmodule.exports = {\n  get: getModel,\n  list: listModels,\n  create: createModel,\n  versions: { list: listModelVersions, get: getModelVersion },\n};\n", "const { transformFileInputs } = require(\"./util\");\n\n/**\n * Create a new prediction\n *\n * @param {object} options\n * @param {string} options.model - The model.\n * @param {string} options.version - The model version.\n * @param {object} options.input - Required. An object with the model inputs\n * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the prediction has new output\n * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n * @param {boolean} [options.stream] - Whether to stream the prediction output. Defaults to false\n * @returns {Promise<object>} Resolves with the created prediction\n */\nasync function createPrediction(options) {\n  const { model, version, stream, input, ...data } = options;\n\n  if (data.webhook) {\n    try {\n      // eslint-disable-next-line no-new\n      new URL(data.webhook);\n    } catch (err) {\n      throw new Error(\"Invalid webhook URL\");\n    }\n  }\n\n  let response;\n  if (version) {\n    response = await this.request(\"/predictions\", {\n      method: \"POST\",\n      data: {\n        ...data,\n        input: await transformFileInputs(input),\n        version,\n        stream,\n      },\n    });\n  } else if (model) {\n    response = await this.request(`/models/${model}/predictions`, {\n      method: \"POST\",\n      data: {\n        ...data,\n        input: await transformFileInputs(input),\n        stream,\n      },\n    });\n  } else {\n    throw new Error(\"Either model or version must be specified\");\n  }\n\n  return response.json();\n}\n\n/**\n * Fetch a prediction by ID\n *\n * @param {number} prediction_id - Required. The prediction ID\n * @returns {Promise<object>} Resolves with the prediction data\n */\nasync function getPrediction(prediction_id) {\n  const response = await this.request(`/predictions/${prediction_id}`, {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\n/**\n * Cancel a prediction by ID\n *\n * @param {string} prediction_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */\nasync function cancelPrediction(prediction_id) {\n  const response = await this.request(`/predictions/${prediction_id}/cancel`, {\n    method: \"POST\",\n  });\n\n  return response.json();\n}\n\n/**\n * List all predictions\n *\n * @returns {Promise<object>} - Resolves with a page of predictions\n */\nasync function listPredictions() {\n  const response = await this.request(\"/predictions\", {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\nmodule.exports = {\n  create: createPrediction,\n  get: getPrediction,\n  cancel: cancelPrediction,\n  list: listPredictions,\n};\n", "/**\n * Create a new training\n *\n * @param {string} model_owner - Required. The username of the user or organization who owns the model\n * @param {string} model_name - Required. The name of the model\n * @param {string} version_id - Required. The version ID\n * @param {object} options\n * @param {string} options.destination - Required. The destination for the trained version in the form \"{username}/{model_name}\"\n * @param {object} options.input - Required. An object with the model inputs\n * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the training updates\n * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n * @returns {Promise<object>} Resolves with the data for the created training\n */\nasync function createTraining(model_owner, model_name, version_id, options) {\n  const { ...data } = options;\n\n  if (data.webhook) {\n    try {\n      // eslint-disable-next-line no-new\n      new URL(data.webhook);\n    } catch (err) {\n      throw new Error(\"Invalid webhook URL\");\n    }\n  }\n\n  const response = await this.request(\n    `/models/${model_owner}/${model_name}/versions/${version_id}/trainings`,\n    {\n      method: \"POST\",\n      data,\n    }\n  );\n\n  return response.json();\n}\n\n/**\n * Fetch a training by ID\n *\n * @param {string} training_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */\nasync function getTraining(training_id) {\n  const response = await this.request(`/trainings/${training_id}`, {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\n/**\n * Cancel a training by ID\n *\n * @param {string} training_id - Required. The training ID\n * @returns {Promise<object>} Resolves with the data for the training\n */\nasync function cancelTraining(training_id) {\n  const response = await this.request(`/trainings/${training_id}/cancel`, {\n    method: \"POST\",\n  });\n\n  return response.json();\n}\n\n/**\n * List all trainings\n *\n * @returns {Promise<object>} - Resolves with a page of trainings\n */\nasync function listTrainings() {\n  const response = await this.request(\"/trainings\", {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\nmodule.exports = {\n  create: createTraining,\n  get: getTraining,\n  cancel: cancelTraining,\n  list: listTrainings,\n};\n", "/**\n * Get the default webhook signing secret\n *\n * @returns {Promise<object>} Resolves with the signing secret for the default webhook\n */\nasync function getDefaultWebhookSecret() {\n  const response = await this.request(\"/webhooks/default/secret\", {\n    method: \"GET\",\n  });\n\n  return response.json();\n}\n\nmodule.exports = {\n  default: {\n    secret: {\n      get: getDefaultWebhookSecret,\n    },\n  },\n};\n", "{\n  \"name\": \"replicate\",\n  \"version\": \"0.29.1\",\n  \"description\": \"JavaScript client for Replicate\",\n  \"repository\": \"github:replicate/replicate-javascript\",\n  \"homepage\": \"https://github.com/replicate/replicate-javascript#readme\",\n  \"bugs\": \"https://github.com/replicate/replicate-javascript/issues\",\n  \"license\": \"Apache-2.0\",\n  \"main\": \"index.js\",\n  \"type\": \"commonjs\",\n  \"types\": \"index.d.ts\",\n  \"files\": [\n    \"CONTRIBUTING.md\",\n    \"LICENSE\",\n    \"README.md\",\n    \"index.d.ts\",\n    \"index.js\",\n    \"lib/**/*.js\",\n    \"vendor/**/*\",\n    \"package.json\"\n  ],\n  \"engines\": {\n    \"node\": \">=18.0.0\",\n    \"npm\": \">=7.19.0\",\n    \"git\": \">=2.11.0\",\n    \"yarn\": \">=1.7.0\"\n  },\n  \"scripts\": {\n    \"check\": \"tsc\",\n    \"format\": \"biome format . --write\",\n    \"lint-biome\": \"biome lint .\",\n    \"lint-publint\": \"publint\",\n    \"lint\": \"npm run lint-biome && npm run lint-publint\",\n    \"test\": \"jest\"\n  },\n  \"optionalDependencies\": {\n    \"readable-stream\": \">=4.0.0\"\n  },\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"^1.4.1\",\n    \"@types/jest\": \"^29.5.3\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.56.0\",\n    \"cross-fetch\": \"^3.1.5\",\n    \"jest\": \"^29.6.2\",\n    \"nock\": \"^14.0.0-beta.4\",\n    \"publint\": \"^0.2.7\",\n    \"ts-jest\": \"^29.1.0\",\n    \"typescript\": \"^5.0.2\"\n  }\n}\n", "const ApiError = require(\"./lib/error\");\nconst ModelVersionIdentifier = require(\"./lib/identifier\");\nconst { createReadableStream } = require(\"./lib/stream\");\nconst {\n  withAutomaticRetries,\n  validateWebhook,\n  parseProgressFromLogs,\n  streamAsyncIterator,\n} = require(\"./lib/util\");\n\nconst accounts = require(\"./lib/accounts\");\nconst collections = require(\"./lib/collections\");\nconst deployments = require(\"./lib/deployments\");\nconst hardware = require(\"./lib/hardware\");\nconst models = require(\"./lib/models\");\nconst predictions = require(\"./lib/predictions\");\nconst trainings = require(\"./lib/trainings\");\nconst webhooks = require(\"./lib/webhooks\");\n\nconst packageJSON = require(\"./package.json\");\n\n/**\n * Replicate API client library\n *\n * @see https://replicate.com/docs/reference/http\n * @example\n * // Create a new Replicate API client instance\n * const Replicate = require(\"replicate\");\n * const replicate = new Replicate({\n *     // get your token from https://replicate.com/account\n *     auth: process.env.REPLICATE_API_TOKEN,\n *     userAgent: \"my-app/1.2.3\"\n * });\n *\n * // Run a model and await the result:\n * const model = 'owner/model:version-id'\n * const input = {text: 'Hello, world!'}\n * const output = await replicate.run(model, { input });\n */\nclass Replicate {\n  /**\n   * Create a new Replicate API client instance.\n   *\n   * @param {object} options - Configuration options for the client\n   * @param {string} options.auth - API access token. Defaults to the `REPLICATE_API_TOKEN` environment variable.\n   * @param {string} options.userAgent - Identifier of your app\n   * @param {string} [options.baseUrl] - Defaults to https://api.replicate.com/v1\n   * @param {Function} [options.fetch] - Fetch function to use. Defaults to `globalThis.fetch`\n   */\n  constructor(options = {}) {\n    this.auth =\n      options.auth ||\n      (typeof process !== \"undefined\" ? process.env.REPLICATE_API_TOKEN : null);\n    this.userAgent =\n      options.userAgent || `replicate-javascript/${packageJSON.version}`;\n    this.baseUrl = options.baseUrl || \"https://api.replicate.com/v1\";\n    this.fetch = options.fetch || globalThis.fetch;\n\n    this.accounts = {\n      current: accounts.current.bind(this),\n    };\n\n    this.collections = {\n      list: collections.list.bind(this),\n      get: collections.get.bind(this),\n    };\n\n    this.deployments = {\n      get: deployments.get.bind(this),\n      create: deployments.create.bind(this),\n      update: deployments.update.bind(this),\n      list: deployments.list.bind(this),\n      predictions: {\n        create: deployments.predictions.create.bind(this),\n      },\n    };\n\n    this.hardware = {\n      list: hardware.list.bind(this),\n    };\n\n    this.models = {\n      get: models.get.bind(this),\n      list: models.list.bind(this),\n      create: models.create.bind(this),\n      versions: {\n        list: models.versions.list.bind(this),\n        get: models.versions.get.bind(this),\n      },\n    };\n\n    this.predictions = {\n      create: predictions.create.bind(this),\n      get: predictions.get.bind(this),\n      cancel: predictions.cancel.bind(this),\n      list: predictions.list.bind(this),\n    };\n\n    this.trainings = {\n      create: trainings.create.bind(this),\n      get: trainings.get.bind(this),\n      cancel: trainings.cancel.bind(this),\n      list: trainings.list.bind(this),\n    };\n\n    this.webhooks = {\n      default: {\n        secret: {\n          get: webhooks.default.secret.get.bind(this),\n        },\n      },\n    };\n  }\n\n  /**\n   * Run a model and wait for its output.\n   *\n   * @param {string} ref - Required. The model version identifier in the format \"owner/name\" or \"owner/name:version\"\n   * @param {object} options\n   * @param {object} options.input - Required. An object with the model inputs\n   * @param {object} [options.wait] - Options for waiting for the prediction to finish\n   * @param {number} [options.wait.interval] - Polling interval in milliseconds. Defaults to 500\n   * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the prediction has new output\n   * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n   * @param {AbortSignal} [options.signal] - AbortSignal to cancel the prediction\n   * @param {Function} [progress] - Callback function that receives the prediction object as it's updated. The function is called when the prediction is created, each time its updated while polling for completion, and when it's completed.\n   * @throws {Error} If the reference is invalid\n   * @throws {Error} If the prediction failed\n   * @returns {Promise<object>} - Resolves with the output of running the model\n   */\n  async run(ref, options, progress) {\n    const { wait, ...data } = options;\n\n    const identifier = ModelVersionIdentifier.parse(ref);\n\n    let prediction;\n    if (identifier.version) {\n      prediction = await this.predictions.create({\n        ...data,\n        version: identifier.version,\n      });\n    } else if (identifier.owner && identifier.name) {\n      prediction = await this.predictions.create({\n        ...data,\n        model: `${identifier.owner}/${identifier.name}`,\n      });\n    } else {\n      throw new Error(\"Invalid model version identifier\");\n    }\n\n    // Call progress callback with the initial prediction object\n    if (progress) {\n      progress(prediction);\n    }\n\n    const { signal } = options;\n\n    prediction = await this.wait(\n      prediction,\n      wait || {},\n      async (updatedPrediction) => {\n        // Call progress callback with the updated prediction object\n        if (progress) {\n          progress(updatedPrediction);\n        }\n\n        if (signal && signal.aborted) {\n          await this.predictions.cancel(updatedPrediction.id);\n          return true; // stop polling\n        }\n\n        return false; // continue polling\n      }\n    );\n\n    // Call progress callback with the completed prediction object\n    if (progress) {\n      progress(prediction);\n    }\n\n    if (prediction.status === \"failed\") {\n      throw new Error(`Prediction failed: ${prediction.error}`);\n    }\n\n    return prediction.output;\n  }\n\n  /**\n   * Make a request to the Replicate API.\n   *\n   * @param {string} route - REST API endpoint path\n   * @param {object} options - Request parameters\n   * @param {string} [options.method] - HTTP method. Defaults to GET\n   * @param {object} [options.params] - Query parameters\n   * @param {object|Headers} [options.headers] - HTTP headers\n   * @param {object} [options.data] - Body parameters\n   * @returns {Promise<Response>} - Resolves with the response object\n   * @throws {ApiError} If the request failed\n   */\n  async request(route, options) {\n    const { auth, baseUrl, userAgent } = this;\n\n    let url;\n    if (route instanceof URL) {\n      url = route;\n    } else {\n      url = new URL(\n        route.startsWith(\"/\") ? route.slice(1) : route,\n        baseUrl.endsWith(\"/\") ? baseUrl : `${baseUrl}/`\n      );\n    }\n\n    const { method = \"GET\", params = {}, data } = options;\n\n    for (const [key, value] of Object.entries(params)) {\n      url.searchParams.append(key, value);\n    }\n\n    const headers = {};\n    if (auth) {\n      headers[\"Authorization\"] = `Token ${auth}`;\n    }\n    headers[\"Content-Type\"] = \"application/json\";\n    headers[\"User-Agent\"] = userAgent;\n    if (options.headers) {\n      for (const [key, value] of Object.entries(options.headers)) {\n        headers[key] = value;\n      }\n    }\n\n    const init = {\n      method,\n      headers,\n      body: data ? JSON.stringify(data) : undefined,\n    };\n\n    const shouldRetry =\n      method === \"GET\"\n        ? (response) => response.status === 429 || response.status >= 500\n        : (response) => response.status === 429;\n\n    // Workaround to fix `TypeError: Illegal invocation` error in Cloudflare Workers\n    // https://github.com/replicate/replicate-javascript/issues/134\n    const _fetch = this.fetch; // eslint-disable-line no-underscore-dangle\n    const response = await withAutomaticRetries(async () => _fetch(url, init), {\n      shouldRetry,\n    });\n\n    if (!response.ok) {\n      const request = new Request(url, init);\n      const responseText = await response.text();\n      throw new ApiError(\n        `Request to ${url} failed with status ${response.status} ${response.statusText}: ${responseText}.`,\n        request,\n        response\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Stream a model and wait for its output.\n   *\n   * @param {string} identifier - Required. The model version identifier in the format \"{owner}/{name}:{version}\"\n   * @param {object} options\n   * @param {object} options.input - Required. An object with the model inputs\n   * @param {string} [options.webhook] - An HTTPS URL for receiving a webhook when the prediction has new output\n   * @param {string[]} [options.webhook_events_filter] - You can change which events trigger webhook requests by specifying webhook events (`start`|`output`|`logs`|`completed`)\n   * @param {AbortSignal} [options.signal] - AbortSignal to cancel the prediction\n   * @throws {Error} If the prediction failed\n   * @yields {ServerSentEvent} Each streamed event from the prediction\n   */\n  async *stream(ref, options) {\n    const { wait, ...data } = options;\n\n    const identifier = ModelVersionIdentifier.parse(ref);\n\n    let prediction;\n    if (identifier.version) {\n      prediction = await this.predictions.create({\n        ...data,\n        version: identifier.version,\n        stream: true,\n      });\n    } else if (identifier.owner && identifier.name) {\n      prediction = await this.predictions.create({\n        ...data,\n        model: `${identifier.owner}/${identifier.name}`,\n        stream: true,\n      });\n    } else {\n      throw new Error(\"Invalid model version identifier\");\n    }\n\n    if (prediction.urls && prediction.urls.stream) {\n      const { signal } = options;\n      const stream = createReadableStream({\n        url: prediction.urls.stream,\n        fetch: this.fetch,\n        options: { signal },\n      });\n\n      yield* streamAsyncIterator(stream);\n    } else {\n      throw new Error(\"Prediction does not support streaming\");\n    }\n  }\n\n  /**\n   * Paginate through a list of results.\n   *\n   * @generator\n   * @example\n   * for await (const page of replicate.paginate(replicate.predictions.list) {\n   *    console.log(page);\n   * }\n   * @param {Function} endpoint - Function that returns a promise for the next page of results\n   * @yields {object[]} Each page of results\n   */\n  async *paginate(endpoint) {\n    const response = await endpoint();\n    yield response.results;\n    if (response.next) {\n      const nextPage = () =>\n        this.request(response.next, { method: \"GET\" }).then((r) => r.json());\n      yield* this.paginate(nextPage);\n    }\n  }\n\n  /**\n   * Wait for a prediction to finish.\n   *\n   * If the prediction has already finished,\n   * this function returns immediately.\n   * Otherwise, it polls the API until the prediction finishes.\n   *\n   * @async\n   * @param {object} prediction - Prediction object\n   * @param {object} options - Options\n   * @param {number} [options.interval] - Polling interval in milliseconds. Defaults to 500\n   * @param {Function} [stop] - Async callback function that is called after each polling attempt. Receives the prediction object as an argument. Return false to cancel polling.\n   * @throws {Error} If the prediction doesn't complete within the maximum number of attempts\n   * @throws {Error} If the prediction failed\n   * @returns {Promise<object>} Resolves with the completed prediction object\n   */\n  async wait(prediction, options, stop) {\n    const { id } = prediction;\n    if (!id) {\n      throw new Error(\"Invalid prediction\");\n    }\n\n    if (\n      prediction.status === \"succeeded\" ||\n      prediction.status === \"failed\" ||\n      prediction.status === \"canceled\"\n    ) {\n      return prediction;\n    }\n\n    // eslint-disable-next-line no-promise-executor-return\n    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n    const interval = (options && options.interval) || 500;\n\n    let updatedPrediction = await this.predictions.get(id);\n\n    while (\n      updatedPrediction.status !== \"succeeded\" &&\n      updatedPrediction.status !== \"failed\" &&\n      updatedPrediction.status !== \"canceled\"\n    ) {\n      /* eslint-disable no-await-in-loop */\n      if (stop && (await stop(updatedPrediction)) === true) {\n        break;\n      }\n\n      await sleep(interval);\n      updatedPrediction = await this.predictions.get(prediction.id);\n      /* eslint-enable no-await-in-loop */\n    }\n\n    if (updatedPrediction.status === \"failed\") {\n      throw new Error(`Prediction failed: ${updatedPrediction.error}`);\n    }\n\n    return updatedPrediction;\n  }\n}\n\nmodule.exports = Replicate;\nmodule.exports.validateWebhook = validateWebhook;\nmodule.exports.parseProgressFromLogs = parseProgressFromLogs;\n", "import Replicate from 'replicate'\n\nexport async function onRequestGet(context) {\n  // Extract the prediction_id from the query parameters\n  const url = new URL(context.request.url)\n  const prediction_id = url.searchParams.get('prediction_id')\n\n  if (!prediction_id) {\n    return new Response(\n      JSON.stringify({ error: 'prediction_id is required' }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n        status: 400,\n      }\n    )\n  }\n\n  const replicateApiToken = context.env.REPLICATE_API_TOKEN\n  const replicate = new Replicate({\n    auth: replicateApiToken,\n  })\n\n  const prediction = await replicate.predictions.cancel(prediction_id)\n\n  // Return the prediction result as JSON\n  return new Response(JSON.stringify(prediction), {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\n", "import { createClient } from '@supabase/supabase-js'\nimport Replicate from 'replicate'\n\nexport async function onRequestPost(context) {\n  const MODEL_ID =\n    '8a89b0ab59a050244a751b6475d91041a8582ba33692ae6fab65e0c51b700328'\n\n  // const license_key = request.body.license_key\n\n  // Extract the JSON payload from the request\n  const { image, prompt, num_samples, negative_prompt } =\n    await context.request.json()\n\n  const supabaseUrl = context.env.VITE_SUPABASE_URL\n  const replicateApiToken = context.env.REPLICATE_API_TOKEN\n  const replicate = new Replicate({\n    auth: replicateApiToken,\n  })\n\n  // const getServiceSupabase = () =>\n  //   createClient(supabaseUrl, context.env.SUPABASE_SERVICE_KEY)\n\n  // const supabase = getServiceSupabase()\n\n  const prediction = await replicate.predictions.create({\n    version: MODEL_ID,\n    input: {\n      image,\n      prompt,\n      negative_prompt,\n      num_samples: parseInt(num_samples),\n    },\n  })\n\n  // Return the prediction result as JSON\n  return new Response(JSON.stringify(prediction), {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\n", "import Replicate from 'replicate'\n\nexport async function onRequestGet(context) {\n  // Extract the prediction_id from the query parameters\n  const url = new URL(context.request.url)\n  const prediction_id = url.searchParams.get('prediction_id')\n\n  if (!prediction_id) {\n    return new Response(\n      JSON.stringify({ error: 'prediction_id is required' }),\n      {\n        headers: { 'Content-Type': 'application/json' },\n        status: 400,\n      }\n    )\n  }\n\n  const replicateApiToken = context.env.REPLICATE_API_TOKEN\n  const replicate = new Replicate({\n    auth: replicateApiToken,\n  })\n\n  const prediction = await replicate.predictions.get(prediction_id)\n\n  // Return the prediction result as JSON\n  return new Response(JSON.stringify(prediction), {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n}\n", "import { onRequestGet as __api_cancel_prediction_js_onRequestGet } from \"/Users/emilio/Documents/snapzeditor/functions/api/cancel-prediction.js\"\nimport { onRequestPost as __api_create_prediction_js_onRequestPost } from \"/Users/emilio/Documents/snapzeditor/functions/api/create-prediction.js\"\nimport { onRequestGet as __api_get_prediction_js_onRequestGet } from \"/Users/emilio/Documents/snapzeditor/functions/api/get-prediction.js\"\n\nexport const routes = [\n    {\n      routePath: \"/api/cancel-prediction\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_cancel_prediction_js_onRequestGet],\n    },\n  {\n      routePath: \"/api/create-prediction\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_create_prediction_js_onRequestPost],\n    },\n  {\n      routePath: \"/api/get-prediction\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_get_prediction_js_onRequestGet],\n    },\n  ]", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY from \"/Users/emilio/Documents/snapzeditor/.wrangler/tmp/bundle-AODDXG/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/emilio/Documents/snapzeditor/node_modules/wrangler/templates/middleware/common.ts\";\nimport type {\n\tWithMiddleware,\n\tWorkerEntrypointConstructor,\n} from \"/Users/emilio/Documents/snapzeditor/.wrangler/tmp/bundle-AODDXG/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/emilio/Documents/snapzeditor/.wrangler/tmp/bundle-AODDXG/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(\n\tworker: WithMiddleware<ExportedHandler>\n): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (worker.middleware === undefined || worker.middleware.length === 0) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of worker.middleware) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WithMiddleware<WorkerEntrypointConstructor>\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (klass.middleware === undefined || klass.middleware.length === 0) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of klass.middleware) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/emilio/Documents/snapzeditor/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/emilio/Documents/snapzeditor/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/emilio/Documents/snapzeditor/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\t\t\t\t\n\t\t\t\tworker.middleware = [\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default,\n\t\t\t\t\t...(worker.middleware ?? []),\n\t\t\t\t].filter(Boolean);\n\t\t\t\t\n\t\t\t\texport * from \"/Users/emilio/Documents/snapzeditor/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\texport default worker;", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\" } = options;\n  const defaultPattern = `[^${escapeString(options.delimiter || \"/#?\")}]+?`;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || defaultPattern,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? defaultPattern : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {}\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {}\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {}\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            route += `((?:${token.pattern})${token.modifier})`;\n          } else {\n            route += `(${token.pattern})${token.modifier}`;\n          }\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["match", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__copyProps", "__defProp", "__getOwnPropDesc", "__getOwnPropNames", "__hasOwnProp", "__copyProps", "require_stream", "fetch", "Replicate", "response", "Replicate", "Replicate", "import_replicate", "onRequestGet", "Replicate", "import_replicate", "onRequestGet", "value", "_a", "result", "i"]
}
